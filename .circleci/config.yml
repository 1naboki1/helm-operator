version: 2.1

executors:
  builder:
    machine:
      image: ubuntu-1604:201903-01
    resource_class: large
    working_directory: /home/circleci/go/src/github.com/fluxcd/helm-operator
    environment:
      # We don't need a GOPATH but CircleCI defines it, so we override it
      GOPATH: /home/circleci/go
      GOPROXY: https://proxy.golang.org
      PATH: /bin:/usr/bin:/usr/local/go/bin:/home/circleci/go/bin

commands:
  save_build_cache:
    steps:
      - save_cache:
          key: cache-{{ checksum "Makefile" }}
          paths:
            - "cache"
      - save_cache:
          key: go-build-{{ .Branch }}-{{ .Revision }}
          paths:
            - "~/.cache/go-build/"
      - save_cache:
          key: go-mod-{{ checksum "go.mod" }}
          paths:
            - "~/go/pkg/mod/"

  restore_build_cache:
    steps:
      - restore_cache:
          keys:
            - cache-{{ checksum "Makefile" }}
            - cache-
      - restore_cache:
          keys:
            - go-build-{{ .Branch }}-{{ .Revision }}
            - go-build-{{ .Branch }}-
            - go-build-
      - restore_cache:
          keys:
            - go-mod-{{ checksum "go.mod" }}
            - go-mod-

  save_build_docker_image:
    parameters:
      target:
        type: string
    steps:
      - run: |
          TARGET_DIR=$(dirname "<<parameters.target>>")
          if [ -z "$TARGET_DIR" ]; then
            echo "Empty target directory for image"; exit 1
          fi
          mkdir -p "${TARGET_DIR}"
          docker save "fluxcd/helm-operator:$(docker/image-tag)" -o <<parameters.target>>

  load_build_docker_image:
    parameters:
      input:
        type: string
    steps:
      - run: |
          docker load -i <<parameters.input>>

  pkg_install:
    parameters:
      packages:
        type: string
    steps:
      - run:
          name: Install packages <<parameters.packages>>
          command: |
            # Kill any apt-get processes that may be hanging due to
            # networking related issues, and thus holding on to
            # `/var/lib/apt/lists/lock`.
            # https://support.circleci.com/hc/en-us/articles/360021256633-Apt-Get-Update-Is-Slow-Or-Locked
            sudo killall apt-get || true

            sudo apt-get update

            sudo apt-get install <<parameters.packages>>

  go_install:
    parameters:
      version:
        type: string
    steps:
      - run:
          name: Install Golang <<parameters.version>>
          environment:
            GO_VERSION: <<parameters.version>>
          command: |
            curl -OL https://storage.googleapis.com/golang/go${GO_VERSION}.linux-amd64.tar.gz
            tar -xf go${GO_VERSION}.linux-amd64.tar.gz
            sudo rm -rf /usr/local/go
            sudo mv go /usr/local
            mkdir -p "$HOME/go/bin"
            rm -rf go${GO_VERSION}.linux-amd64.tar.gz
            go version | grep -E "${GO_VERSION}"

  e2e_tests:
    parameters:
      kind_cluster_num:
        type: integer
        default: 4
      helm_version:
        type: string
    steps:
      - run:
          name: End-to-end Helm <<parameters.helm_version>>
          command: make e2e
          environment:
            E2E_KIND_CLUSTER_NUM: <<parameters.kind_cluster_num>>
            HELM_VERSION: <<parameters.helm_version>>

jobs:
  build:
    executor: builder
    steps:
      - checkout
      - go_install:
          version: 1.13.3
      - run: make all
      - save_build_docker_image:
          target: cache/build/docker/helm-operator.tar.gz
      - persist_to_workspace:
          root: cache
          paths:
            - build/

  test_unit:
    executor: builder
    steps:
      - checkout
      - go_install:
          version: 1.13.3
      - run: make test TEST_FLAGS="-race -timeout 5m"

  test_generated:
    executor: builder
    steps:
      - checkout
      - go_install:
          version: 1.13.3
      - run: make check-generated

  test_docs:
    executor: builder
    steps:
      - checkout
      - go_install:
          version: 1.13.3
      - run: make test-docs

  test_e2e:
    executor: builder
    parameters:
      helm_version:
        type: string
    steps:
      - checkout
      - go_install:
          version: 1.13.3
      - pkg_install:
          packages: jq
      - attach_workspace:
          at: cache
      - load_build_docker_image:
          input: cache/build/docker/helm-operator.tar.gz
      - e2e_tests:
          helm_version: <<parameters.helm_version>>

  helm_chart:
    docker:
      - image: circleci/golang:1.13
    steps:
      - checkout
      - run:
          name: Install kubectl
          command: sudo curl -L https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl && sudo chmod +x /usr/local/bin/kubectl
      - run:
          name: Install helm
          command: sudo curl -L https://storage.googleapis.com/kubernetes-helm/helm-v2.14.2-linux-amd64.tar.gz | tar xz && sudo mv linux-amd64/helm /bin/helm && sudo rm -rf linux-amd64
      - run:
          name: Initialize helm
          command:  helm init --client-only --kubeconfig=$HOME/.kube/kubeconfig
      - run:
          name: Lint chart
          command: |
            helm lint ./chart/helm-operator
      - run:
          name: Package chart
          command: |
            mkdir $HOME/chart
            helm package ./chart/helm-operator --destination $HOME/chart
      - run:
          name: Publish chart
          command: |
            git config --global user.email fluxcdbot@users.noreply.github.com
            git config --global user.name fluxcdbot

            # Push to fluxcd/charts gh-pages branch
            if echo "${CIRCLE_TAG}" | grep -Eq "^chart.*"; then
              REPOSITORY="https://fluxcdbot:${GITHUB_TOKEN}@github.com/fluxcd/charts.git"
              mkdir $HOME/fluxcd-charts
              cd $HOME/fluxcd-charts && git clone ${REPOSITORY}
              cd $HOME/fluxcd-charts/charts
              git checkout gh-pages
              mv $HOME/chart/*.tgz .
              helm repo index . --url https://charts.fluxcd.io
              git add .
              git commit -m "Publish chart to fluxcd/charts"
              git push origin gh-pages
            else
              echo "Not a chart release! Skip chart publish"
            fi

workflows:
  version: 2
  build-and-push:
    jobs:
      - test_unit
      - test_generated
      - test_docs
      - build:
          requires:
            - test_unit
            - test_generated
            - test_docs
      - test_e2e:
          helm_version: v2
          requires:
            - build
      - test_e2e:
          helm_version: v3
          requires:
            - build
  release-helm:
    jobs:
      - helm_chart:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^chart.*/
