// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
		},
		"/flux-helm-operator-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-helm-operator-account.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 948,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x39\x6f\xdc\x30\x10\x85\x7b\xfe\x8a\x01\x5c\x38\x09\x2c\x05\xee\x02\x75\xb6\x8b\x14\x09\x52\x28\x47\x13\xa4\x18\x92\x4f\x59\xc6\x5c\x8e\x30\x24\x37\x87\xb0\xff\x3d\x90\xb4\x06\xbc\x8e\xed\x34\xdb\x8d\xe6\xd2\x9b\xc7\xaf\x69\x1a\x73\x46\x9f\x36\xa0\x0c\xdd\x05\x07\x62\xe7\xa4\xa6\x72\x41\x2e\xd6\x5c\xa0\xa4\x12\x91\x2f\x88\x93\x3f\x4a\x91\x0d\xc9\x87\xf4\x9d\x58\x61\xce\x48\x52\xfc\x4d\x09\xf0\xf0\x34\x88\xd2\xbb\x6a\xa1\x09\x05\x99\x7e\x86\xb2\x59\x46\x1a\xcb\x19\x7e\xfe\x03\x72\x26\x27\xa9\xa8\x44\x7a\xd1\x5f\x5f\xdd\xbc\x6c\x0d\x8f\xe1\x0b\x34\x07\x49\x1d\xed\x2e\xcd\x6d\x48\xbe\xa3\x8f\xab\xaa\xab\x55\x94\xd9\xa2\xb0\xe7\xc2\x9d\x21\x8a\x6c\x11\xf3\x1c\x11\x25\xde\xa2\xa3\x21\xd6\x5f\xcd\x06\x71\xdb\xc8\x08\xe5\x22\x6a\x9e\x2e\x4d\x13\x85\x81\xda\x0f\xbc\x45\x1e\xd9\x81\xf6\xfb\x43\xf7\xf2\xd9\xd1\x34\x1d\x57\xa7\x89\x90\xfc\x7e\x6f\x66\xcf\xee\x8b\x55\xcb\xae\xe5\x5a\x36\xa2\xe1\x0f\x97\x20\xa9\xbd\x7d\x93\xdb\x20\xaf\x77\x97\x16\x85\xef\x6e\xb9\x59\xdd\xeb\x25\xe2\x94\x87\x18\xad\x11\xcb\x78\x43\x3c\x86\xb7\x2a\x75\xcc\x1d\x7d\x3d\x7f\x75\xfe\x6d\xd9\xa9\xc8\x52\xd5\xe1\x28\xb9\x83\xda\x7b\x89\x86\x92\xa4\xfe\xd0\xf8\xb9\x7f\xff\x74\xef\x09\xae\xbf\x5e\xc9\x39\xad\x09\x12\xd1\x63\x98\x17\xdc\x99\xf0\x8c\x36\x43\xf4\xef\x9b\x3c\xb3\x3d\x57\xfb\x03\xae\x1c\x5c\x7e\x14\xcd\xff\x08\x7f\x88\xd6\x43\xf6\x1e\xa3\x2d\xe6\x39\xf2\x18\xb8\xc6\xb2\xe2\x37\x53\xfa\x37\x00\x00\xff\xff\xad\xec\xff\x2b\xb4\x03\x00\x00"),
		},
		"/flux-helm-release-crd.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-helm-release-crd.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 8104,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xeb\x6f\xdb\xc8\x11\xff\xae\xbf\x62\x9a\x16\xb0\x53\xd8\xcc\xab\x28\x5a\x01\x87\xbb\xe0\x82\x6b\xd2\xe4\x2e\x86\x1d\xe7\x8b\x91\x02\x23\x72\x48\x4e\xbd\x0f\x76\x1f\xb2\xd5\xa2\xff\x7b\xb1\x4b\x52\x12\x29\x8a\xa2\x1c\xb7\x40\x91\xe3\x97\x44\xfb\x98\xfd\xcd\xeb\x37\xb3\xeb\xf3\xf3\xf3\x19\x56\xfc\x99\x8c\x65\xad\xe6\x80\x15\xd3\xbd\x23\x15\x7e\xd9\xe4\xf6\x4f\x36\x61\xfd\x6c\xf9\x62\x41\x0e\x5f\xcc\x6e\x59\x65\x73\xf8\xd1\x5b\xa7\xe5\x25\x59\xed\x4d\x4a\x6f\x28\x67\xc5\x8e\xb5\x9a\x49\x72\x98\xa1\xc3\xf9\x0c\x40\xa1\xa4\x39\x94\x24\xa4\x21\x41\x68\xc9\x26\xe1\x47\x92\x0b\x7f\x9f\x66\x09\xeb\x99\xad\x28\x0d\x2b\x0b\xa3\x7d\x55\x2f\xdd\x9a\xad\x25\xd8\xb0\x00\xa0\x3e\xf7\x2d\x09\x79\x59\x0b\x8b\xa3\x82\xad\x7b\xdf\x9f\xf9\xc0\xd6\xc5\xd9\x4a\x78\x83\xa2\x0b\x21\x4e\xd8\x52\x1b\xf7\xcb\x46\xf8\x39\x94\x66\x06\x60\x53\x5d\xd1\x1c\xe2\x44\x85\x29\x65\x33\x00\xcc\xb2\xa8\x19\x8a\x0b\xc3\xca\x91\xf9\x51\x0b\x2f\xd5\x7a\xe3\x5f\xaf\x3e\xfe\x72\x81\xae\x9c\x43\x62\x1d\x3a\x6f\x93\xe6\xa4\x20\x25\xae\x69\x0d\xb1\x8d\x1b\xc0\xad\xc2\x51\xd6\x19\x56\xc5\x21\x51\x57\xf1\x57\x47\x58\x67\x68\x92\xac\x54\xab\x5a\x13\x7b\xf3\xfd\xe9\x0f\x49\xd8\xf3\xdd\x77\x4f\x1a\x50\xd9\x93\xa7\x5f\x12\x49\xd6\x62\xd1\x05\xfd\x73\x67\x6c\xfc\xa0\xd6\xf7\x49\x6a\x08\xc3\x49\x9f\x58\x92\x75\x28\xab\x8e\xc8\xd7\x3d\x71\x19\xba\x30\x60\xfd\xc2\x34\xf1\xd4\x18\xb7\x06\x3e\x87\x7f\xfd\x7b\x06\xb0\x6c\xa3\x73\xf9\x62\xf3\x6b\xed\x85\x5a\x72\x9c\x8a\x3b\xc9\x2c\x29\x9b\x83\x33\xbe\x3d\xcb\x3a\x6d\xb0\xa0\xf5\xd8\x12\x05\x67\x11\x65\x2d\x43\x57\xa4\x5e\x5f\xbc\xfb\xfc\xea\x2a\x2d\x49\xe2\xbc\xd9\x56\x19\x5d\x91\x71\xdc\x62\x8a\xa2\x9a\xa8\x6d\x3f\x43\xff\xf0\x6c\xc2\x79\x37\x27\x69\x89\xc6\x9d\x7c\xd9\x9a\x1d\x92\x10\xbe\x10\x94\x6d\xca\x75\x26\x00\x32\xb2\xa9\xe1\x2a\x82\x83\x4f\x25\xc5\xe0\x6e\x75\x06\x57\xb2\x85\x26\x32\xc0\xa1\x29\xc8\xd9\x04\xde\xe5\xa0\xb4\x03\xeb\xab\x4a\x30\x65\x67\xc0\x0e\xee\x58\x08\xc8\x28\x47\x2f\x1c\x38\xdd\x3b\x05\x60\xf9\x32\xe9\x8d\xed\x38\x78\x4b\x0f\x74\x8e\x8c\x9a\xc3\x93\xbf\x2d\x6f\x5e\x9e\xbd\xfa\xf2\xbb\x27\x9d\x15\x5b\x61\x3f\x4d\x9f\x56\x85\xe0\xbb\x11\xfc\x0b\x82\x82\x14\x19\x74\x94\xc1\x62\x05\x98\xe7\x7c\xcf\xaa\x00\x57\xd2\x8e\x46\xaa\x4d\x5d\x70\x3a\x2c\x80\x36\xa4\xea\x53\x1e\xa4\xed\x0d\x9e\xff\xf3\xf9\xf9\x9f\xbf\x9c\xde\x9c\x37\xff\xfb\x7d\x3b\xf4\xf4\xfb\x9e\x11\x24\xde\xbf\xe5\x10\x6a\xab\x83\x36\x90\x78\xcf\xd2\x4b\x50\x5e\x2e\xc8\x80\xce\xd7\x06\x31\xb4\xe4\x18\xdd\x41\x89\x5b\xa2\xea\xac\x75\x62\x1c\x79\xf1\x7c\x50\x8d\x40\x4e\x05\x99\xde\x5c\xae\x8d\x44\x17\x67\x5f\xbd\xec\xcc\xd5\x91\xb3\xe6\xba\xe3\x7d\x16\xb7\x0d\x38\x2e\x98\x7d\xe3\x87\xd6\x87\x61\xd4\x6e\x28\x71\xf3\xa1\xdd\x75\x54\x2d\xfa\xbf\xee\x2d\xc7\x92\xb4\x77\xa3\xaa\x47\xb5\x59\x59\x87\x42\x80\x36\xe0\xab\xc2\x60\x46\xed\x5e\x60\x05\x96\x02\xb7\xda\x87\x79\xe5\x8f\x7f\xe8\x65\x91\x25\xf7\x19\x85\xef\xd3\x45\x0f\xd6\xbb\x7c\x6d\xf1\xda\xc4\x71\x63\x60\x35\x4f\x16\xb4\x8a\xf4\xd2\x82\x1d\x44\xb6\xd0\x5a\x10\xaa\x59\x0f\x57\x4a\xd7\xf5\xa6\xe3\x8e\x8f\x3b\x6b\x63\xad\x2d\x54\x1a\xed\x8b\x12\x32\x12\xe4\xe8\x99\xa1\x58\x16\xa6\x83\x31\x5a\x88\x05\xa6\xb7\x7d\x20\xf5\x0e\xbd\xf8\x3b\xa5\xae\x1f\x07\x7b\xb8\x36\x7c\xa4\x70\x21\x76\xb4\x1a\xd4\x8c\xdc\x59\xad\x55\x45\x26\xb8\x6a\x0d\xc5\x06\x3d\xbb\x04\xac\xd5\x5a\xe1\x1c\x59\x78\x43\xfd\x40\x18\xd7\x72\x6d\xf6\xe3\x90\xd5\xf6\x5e\x27\x8d\xaf\x42\x15\xdd\x67\x72\xe0\x1c\x14\x51\x16\x1b\x9a\xe3\xa0\xb5\x22\x86\xd0\x8d\xef\xcc\xd8\x06\x83\xbf\xd5\xfa\x76\xc0\x1b\xa3\x56\x37\xb4\x24\xe5\xa0\x0c\x5b\x21\x37\x5a\x82\xf1\x4a\x05\xce\xcf\x7c\xc8\xfe\xb5\x3f\x8e\x06\xb5\x27\xe3\x77\xf0\x84\xce\x65\x2b\xb5\x03\xed\xde\x21\xbb\xe8\x7e\x54\x2b\x60\x95\xf1\x92\x33\x8f\x02\xde\xfb\x05\x19\x45\x2e\xa4\x5d\x15\xca\x14\x6b\x75\x36\x20\x1f\x3a\x24\xfe\xea\xf9\xf3\x3d\xbc\x01\x07\xb8\x03\x46\xf9\x23\x7c\x01\xe9\x71\x16\x8f\xba\x79\xe5\x58\x44\x2e\x96\xac\x7a\xa5\xe9\x42\x67\x36\xfc\x8b\xf0\x86\x2a\xa1\x57\x92\x54\x3f\xf7\xea\x0f\x4d\xb4\x1b\x82\x21\xcc\x56\xb1\x85\x23\x58\x50\xae\x4d\xa8\x78\xe6\xb6\x29\xdc\xeb\xf4\x41\x0b\xd6\xa7\x29\x59\x9b\x7b\x71\x94\x3b\x23\xd5\xfd\xc4\x82\xae\x42\x88\xba\x71\xba\x7c\x43\x95\xa1\x34\xb4\x10\xbf\x81\x6b\x4b\x0d\x4f\xfe\x64\xb4\x4c\x6c\xdc\xfe\x9e\x56\x97\x94\x47\xa2\x27\xec\xa7\x49\x0d\x02\x8d\xc1\x55\x6f\x86\x1d\xc9\x81\xe8\x1e\xa1\xa8\x6e\xbb\x18\x8a\x5d\xa7\x5b\xac\xbf\x31\x1e\x6b\xda\xe8\x3d\x11\xb6\xa5\x73\x28\xed\xc1\x67\xb1\xf2\x46\x25\xcf\x40\x7a\xeb\x42\x35\x66\xb5\x2e\xc8\x5b\xb5\xba\x29\xc5\xfd\x4b\xd6\xb0\x76\x03\x85\x78\x63\xd5\x61\xce\x7e\x2c\x0b\x8e\x9b\x27\xd5\x2a\xe7\xe2\x67\xac\x6a\x9f\x0e\x5b\x6a\x54\x3e\x4c\xf3\xd2\x61\x28\x30\xea\x2d\x18\xf3\x58\xad\x85\xc4\xea\x91\x9c\x06\xe3\x1d\x54\xfb\xdd\xd2\x4e\xe7\xba\x07\xec\x7b\x5a\xb5\x88\xd6\x58\x03\xb3\x15\xe4\xe2\x60\xd3\x8a\x04\xfa\xee\xf6\xaf\xf5\x44\xb2\x42\x39\x94\xf0\x93\x91\xea\xaa\xbe\x96\x4f\x84\xdb\xf2\xdd\x86\x6d\xc0\x90\x33\x4c\x4b\x14\xad\xcd\x5b\xc8\x2c\x08\xd8\x82\xd2\x20\xb4\x2a\xc8\x80\x44\x95\x61\xe8\xea\x0f\x00\xde\x57\x76\xea\x4f\xed\xeb\xb5\xf7\x40\xfe\xd4\x69\xa4\x59\xc1\x5d\xc9\x69\xd9\xb3\x38\xdd\xb3\x75\x43\x35\x64\x92\x21\xb7\xc9\xef\xff\x34\x51\x1e\x95\xda\x26\x98\x0c\x1e\x9a\x25\x35\xd0\x5f\x53\xe4\x7f\x94\x22\x8d\xb9\xbf\x2e\x3f\xe8\x3e\xdc\x2b\x51\x5c\xc5\x36\xfb\x71\x92\xc4\x1b\xf1\xe0\x1c\xf1\x66\xaa\x33\xaf\x2f\x3f\x74\x7d\xf6\x8d\x45\x53\x7c\x88\x0b\xed\xe1\xe3\x38\xad\x42\x57\x3e\xd8\x6b\x61\xf3\x44\xab\x85\xa5\x70\xc7\xae\x6c\x48\x23\x5e\xe3\xa3\x2e\x70\x1a\x6f\x42\x05\x3b\x30\x54\xe9\xa7\x70\x57\x92\xe9\x38\x37\x98\x50\xe8\xd8\xe5\x7e\x2b\x7e\xd6\x8a\x3e\x0e\xb8\xf7\xbc\xfb\x26\xdb\x6d\x08\x07\xdc\xd8\x5d\xbf\x5d\x14\x0f\x2e\xde\x61\x88\x83\x3b\xb6\x23\xb3\xb7\x78\x79\xf8\xe1\x27\xd5\xca\x85\xcb\xb1\xce\x47\xf2\x7a\x6f\x68\xc7\xb3\xfb\xf2\x07\x8d\xd8\xc5\x5c\xb0\x3b\x39\x83\x7d\x59\x30\x9e\x01\xc5\xf0\x6d\xb4\xa7\xd7\x5f\xd8\x45\xce\xa2\xa4\x48\xc2\x96\x1f\x0a\x76\xa5\x5f\x24\xa9\x96\x73\x6d\x8a\x67\x21\xe6\x8f\xbb\x8d\xb4\x5f\x7b\x59\x0e\x99\xf3\xdb\xf8\x56\x99\x51\xce\xaa\x7e\x4d\xfe\xf8\xfa\x6a\x60\xd3\xfe\x84\xed\x60\xbe\x08\xc9\xca\xca\x72\x56\xbf\x6f\xb6\xb9\x69\x39\x84\x74\x93\xa0\x6d\xdb\xd1\x64\x31\x0f\xd7\xa2\x03\x5a\x98\x7d\x24\xb6\x63\xc3\x85\x41\x95\x96\xdd\x76\x42\xa2\x75\x83\xef\x08\x87\xfb\xc3\x5b\xae\xde\x50\x75\x1d\x9f\x97\x26\x20\x68\xc9\x20\xd3\x64\xa3\xa9\x8d\x57\x70\x92\x51\x75\xd2\x3e\x51\x9d\xa2\xb5\x5e\x52\x1b\x5d\x92\x94\xdb\xb0\x17\x8a\xfa\xd9\x20\xf7\x22\x67\x21\x28\x7b\x3a\x02\x7a\x98\x13\xba\x71\xbb\xf1\x46\x08\xdf\xd8\x9e\x9e\xc1\x49\xf3\x97\x94\xa3\x23\x79\x23\x6d\x82\x29\x9a\xf7\xf2\x75\x34\x5c\x5f\x7e\xf8\xba\xf8\xf5\x46\x4c\x8d\xdf\x89\x2f\x04\x5b\x61\xa9\x86\x9e\xe6\x27\xc0\x5b\x0e\xff\x05\x6b\xfc\xb0\x66\xd3\xd7\x99\xc3\x92\x5c\x92\x99\x6a\x91\x78\xf0\x85\x17\xa2\x7e\x2d\x1a\xc6\xfb\xa8\x77\x94\xbe\xff\x17\x68\x39\x05\xf4\xae\x84\xd3\x00\x99\x65\x25\x62\xf8\xef\x8b\xf2\x1d\x6b\xfc\x27\x00\x00\xff\xff\x72\x3c\xc4\xa1\xa8\x1f\x00\x00"),
		},
		"/helm-operator-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "helm-operator-deployment.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 6000,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x4f\x73\xdb\xb8\x15\xbf\xfb\x53\xbc\xb1\x0f\xb9\x58\xa4\x33\x9b\xdd\xce\x30\x93\x43\xbb\xe9\x26\x99\x49\x52\x4f\x9d\xe9\x4c\x4f\xbb\x4f\xe0\x93\x88\x0a\x04\x58\xe0\x51\x2a\xeb\xd9\x7e\xf6\xce\x03\x28\x8a\x14\x25\xd9\xde\x1e\xba\xbc\x58\x06\xf0\xfe\xff\xde\x1f\x60\xb1\x58\x5c\x61\xa3\xff\x46\x3e\x68\x67\x0b\xc0\xa6\x09\xf9\xf6\xf5\xd5\x46\xdb\xb2\x80\xf7\xd4\x18\xd7\xd5\x64\xf9\xaa\x26\xc6\x12\x19\x8b\x2b\x00\x8b\x35\x15\xb0\x32\xed\xbf\x16\x15\x99\x7a\xe1\x1a\xf2\xc8\xce\x3f\x3e\x82\x5e\x41\xf6\x15\x6b\x0a\x0d\x2a\x82\x5f\x7f\xed\x4f\xc7\x7f\x0b\x78\x7c\x9c\xee\x3e\x3e\x02\xd9\x52\x8e\x85\x86\x94\xb0\xf6\xd4\x18\xad\x30\x14\xf0\xfa\x0a\x20\x90\x21\xc5\xce\xcb\x0e\x40\x8d\xac\xaa\xcf\xb8\x24\x13\xd2\xc2\x79\x4d\x84\x96\x3d\x32\xad\xbb\x74\x94\xbb\x86\x0a\xf8\x2b\x29\x4f\xc8\x74\x05\xc0\x54\x37\x06\x99\x7a\xd6\x23\xeb\xe4\x33\x13\x29\x17\xe5\xc8\x87\xd6\x3a\x46\xd6\xce\x8e\x68\x1a\xef\x6a\xe2\x8a\xda\x90\x69\x97\x07\xe5\x51\x54\xb8\x66\xdf\xd2\x75\x3c\xb4\xb7\x39\xfe\x26\xbf\xd5\x8a\xfe\xa8\x94\x6b\x2d\x7f\xbd\x2c\x6e\xeb\x4c\x5b\x53\x28\x7a\x7f\xff\xd9\xe2\xd2\xd0\x37\x6d\x0c\xf9\x6f\x9f\x1f\x92\xd7\xd3\xb7\xe8\x35\x8f\x5c\xd8\x84\x85\xc2\x61\x0f\x40\x39\xbb\xd2\xeb\x2f\xd8\x14\xa3\xc5\xb9\xb1\x89\x6e\x91\x4e\x4f\x4e\x96\xb4\xc2\xd6\xf0\x17\x57\x52\x01\x77\x3f\xdc\xdd\x5d\x10\x4c\x9e\xc3\x88\x38\x48\x28\x78\x2a\x38\xad\x25\xe3\x7b\xdb\x06\xab\x7e\x24\xcf\x0f\xc3\x7e\xc2\xce\xe5\x5d\x32\x41\x7e\x1d\xd9\x41\x9e\x0f\xa8\x3b\x6f\xcb\x9b\xbb\xbb\x03\x8b\xfe\xdc\xcd\xfe\x2f\xfc\xdd\xb5\xb0\xd3\xc6\x80\x25\x2a\x81\x2b\x0a\x04\xbc\x73\xfb\xc0\x88\xe6\x9d\x1c\x41\xcb\xc0\x0e\x28\x30\x2e\x8d\x0e\x15\x6c\xd1\xe8\x12\x99\x4a\xf8\xf6\xf9\x61\x60\xa7\x9c\xb5\xa4\x22\x7c\x00\xd7\xa8\x6d\x60\x48\xa6\xcd\x24\x9f\x0f\xe8\xcd\xa9\x80\xde\x3c\x3b\xa0\x37\x17\x03\x7a\x03\xc9\xbb\x31\x8f\x60\xd3\x2e\xc9\x5b\x62\x8a\xc8\x66\x13\x66\xea\xcd\x9d\x3e\x12\x33\x0d\xfd\xcd\xff\x33\xf4\xa7\xac\x7e\x73\xb0\xfa\xf1\x91\x6c\x39\x3a\xfc\xad\x22\x58\x39\x63\xdc\x4e\xdb\x75\x1f\x6d\xd0\x01\x56\xce\x43\x1b\x64\x0d\x41\xb5\x81\x5d\xad\x03\x95\xb0\xb1\x6e\x67\x7f\xae\x5c\xe0\x00\x2b\x6d\xe8\x76\x60\xb4\xab\xb4\xaa\x12\x46\x0e\x30\x72\x50\xba\x3d\x74\x84\x48\x7e\x78\x70\x3b\x0b\x6b\xcd\x52\x19\x1d\x78\xe4\xea\x80\x0a\xe0\x0a\x6d\x2f\x78\xad\xb9\x6a\x97\xe0\xbc\xc0\x11\x8c\xde\x50\x26\x30\x7d\x65\x0c\xa0\x09\x6e\x10\x51\x4b\x7d\x01\x7d\x88\x87\xb6\xec\x22\x8d\x72\x96\x51\x5b\xf2\xb7\xb0\x24\xe3\x76\xd9\x49\xd8\xd7\xd8\x25\x86\x3b\xc1\x33\x3b\x29\x73\x5b\x5d\x12\xa0\x85\x10\xaa\x9f\x13\xa8\x8e\xcc\x95\x0e\xa2\x9d\x15\x3d\x6b\xe7\x29\xe9\xed\x2c\xc1\x2f\x9f\x4a\xd9\xe2\xee\x27\x6d\xe8\x97\xb7\xd1\x91\x02\x7f\xb4\x8a\x6e\x7b\x5f\xbc\xf2\x34\x30\x4a\xb6\x4e\x79\x7c\xd0\xfc\xb1\x5d\x46\xff\x64\xf0\xf5\x4f\xd1\x16\xb2\xec\x3b\xd8\x50\x07\xa1\x72\xad\x29\x61\x79\xe0\x71\x9d\x54\xbc\xee\x9d\x99\x18\x5d\x1f\x74\xbf\x16\xb9\xd1\x4d\x54\x82\xb6\xf0\x9f\x3c\x0b\xa1\xca\xe7\xee\xd8\x83\x3d\x84\xaa\xd4\xfe\x45\x69\x18\x42\xf5\x74\xfa\xa5\x1a\x24\xa9\xf0\xf0\xf0\x71\x02\xf1\xab\x43\x5a\x3e\x7c\x8c\x66\xb2\x03\x54\x8a\x42\x88\xe6\x7f\xe8\xf1\x12\x34\x3b\xdf\xcd\x8a\xf2\x5a\xf3\x62\x43\xdd\xcb\xaa\xf1\x5c\x89\xf1\xe1\x99\xe6\x11\xe4\x64\x07\x47\x7a\xc2\x72\xe1\xac\xe9\x6e\x61\x47\xb0\x73\xf6\x15\xc3\x92\x40\x3a\x97\x28\xaf\xaa\xda\x95\x57\x2f\x28\xb9\x3a\x0c\xf9\xb7\x47\xc9\x90\x82\x43\xba\x70\x85\x07\xa0\x0b\x61\x10\x98\xee\x7d\x26\x60\x4b\x4e\x7b\x0b\x94\xad\xb3\x5b\xc0\x3d\x98\xca\x38\xf8\xc8\xa9\x0c\x3e\xad\x06\x16\x13\x39\xff\x68\x03\x47\x00\x86\x56\x55\x51\xde\x6d\x74\x7e\xef\x8a\x51\x36\x0c\xf4\x68\xc4\x0d\x1d\x34\x4e\x5b\x0e\x80\x0c\x39\xb1\xca\x05\x12\x65\x2e\x20\xd3\x7d\x3a\x00\x06\xc0\xbd\x78\x11\x7b\xa8\x1c\x7d\x4f\x69\x03\x1d\xe5\xc1\x86\xba\xdb\xa8\xe1\xa8\xa0\xec\x93\x73\x5f\x49\x06\x36\xa3\x54\xc5\xa5\xdb\xd2\x2d\xec\x34\x57\xe2\x9d\x69\x4a\xf6\x99\x14\x47\x2f\x31\x9a\x50\x55\x03\x13\x71\xa2\xb6\xd1\xe8\x04\x96\x7d\xa2\x53\x09\x15\x79\x3a\x9f\x32\x53\x04\x3e\xa7\x29\xc4\xb4\x11\xb2\x14\x9a\xcb\x69\xf3\x9b\xc0\x77\xbe\xe6\x1f\x75\x77\xf4\x14\xb1\x13\xb9\x27\xc4\x0d\xc9\xa6\x29\x64\x1d\xd6\xe6\xa8\x00\xa2\x2d\xfb\x58\xf4\x4d\x02\x95\x20\x45\xfb\x38\xde\x76\x59\xec\x2c\x06\x99\xc9\x4b\x3f\x91\xf0\x91\x14\x2d\x85\x6d\x38\x54\xae\x41\x20\xc7\x3e\xe4\x6b\xf2\x29\x27\x6a\xdc\x50\xaa\xe1\xc2\x37\x3f\x30\x3e\x58\x7e\x3e\x16\x63\xdd\x17\xa2\xfb\x4b\xa3\x12\x3b\xec\x98\xcb\x65\x11\x51\xc7\x11\x47\xaa\x1b\xee\xde\x6b\x5f\xc0\xe3\x50\xd8\x86\x5e\x34\xcc\xd3\xf3\xc9\xe2\x68\x28\xee\x63\xe5\x29\xc6\xc7\x3a\xb8\x2e\x64\xbe\x0f\x7c\x0d\xba\xc6\x35\xa5\x2e\x3d\xa1\xcc\xe0\x27\x6d\xe3\xfc\x06\xb5\xf4\x5b\x4f\x4a\xae\x3a\x07\x7e\x9e\x0c\x61\x20\xe9\xaa\x91\x07\x6c\xd3\x3d\x49\x32\xb7\x62\x6e\x42\x91\xe7\x55\xbb\xcc\x4a\xa7\x36\xe4\x33\xe5\xea\xdc\xe7\x3b\xc2\x2d\xed\x9c\xdf\x84\x7c\x22\x2d\x67\x5c\x87\x11\x73\xc1\x84\x5c\x77\xe4\x2a\x24\x2a\x30\xae\x27\x59\x03\x49\x66\x01\x3d\x77\xed\x62\xa1\x50\xe5\x94\x6d\xf1\x3a\xbb\xcb\xee\x16\x5e\xfd\x61\x4a\x77\xdf\x1a\x73\xef\x8c\x56\x5d\x01\x9f\x56\x5f\x1d\xdf\x7b\x0a\x63\xf3\x1a\xe7\x79\x74\x5d\x19\x26\x4b\xe6\x66\x7a\x47\x48\x91\xb8\x77\x9e\x0b\xf8\xee\xee\xbb\xc3\x90\x6f\xf4\x96\x2c\x85\x70\xef\xdd\x92\xc6\xcd\x43\x78\x7c\x38\xee\x27\xcd\x9c\x41\x5c\x46\xae\x0a\xc8\x2b\x42\xc3\xd5\xbf\x47\x5b\xda\x6a\xd6\x68\xde\x93\xc1\xee\x81\x94\xb3\x65\x7f\x2b\xdc\x7f\xac\x6b\x72\x2d\x0f\x7b\xdf\x0f\x7b\x82\x7a\xfd\x3b\xd5\x2c\xb8\xd6\x2b\x0a\x63\x0d\x3c\xfd\xb3\xa5\xc0\x61\xaa\x95\x6a\xda\x02\xbe\xbf\xab\x27\x8b\x35\xd5\xce\x77\x05\xfc\xf0\xe6\x8b\x1e\x36\x52\x61\xfa\x22\xd5\x61\xc4\xe3\x06\x3e\x59\x65\xda\x92\x52\xb7\xec\x07\xcb\xe9\x1c\x78\x76\x5c\x75\x7e\xde\xbf\x84\xa5\x94\xb5\xb7\xfb\x2e\x33\x1a\x2c\x2b\xda\xb7\xe3\x92\x94\x41\x4f\x65\xea\x2b\xd9\x88\xf6\xe4\xbc\x94\x6a\x40\xd4\xe6\x3e\xf9\xdb\x3b\xc7\x71\xe4\x9a\x9c\x90\x90\xfe\xc5\x9a\xae\x00\xb9\x40\x3f\x31\x17\xc1\xc5\x61\x67\x2a\x6e\xd2\x80\xe7\x13\xc8\xf9\xae\x35\xd7\x7c\xc2\x6a\x7e\xcb\x7c\xba\xe4\xce\x59\x6e\xd1\xf7\x2c\x25\xe9\xf3\x13\x43\xdd\x33\xaa\xec\x0b\xd8\xe6\x91\xee\xfc\xc3\xc2\x09\x07\x9f\xbd\xe2\x9f\x73\x8e\x10\x4c\x8e\x4d\x63\x7b\x51\x04\x3e\x93\xff\xf1\xc9\x23\x11\x17\xc3\x7c\xc6\xa0\xf3\xd1\x9e\x18\x34\x07\xeb\x45\x11\xf8\x4c\xfe\xc7\x27\x67\xf9\x70\x04\x36\xf4\xeb\x49\x2d\xf8\xe8\x76\x92\xf6\x2b\x69\x78\x93\xb7\x05\xf1\xf2\x62\xc1\x71\x69\x31\xbc\xd5\xbd\x9b\x5c\xc2\x8f\xde\xec\x4e\xaf\xf6\x0e\xdd\xb4\x4b\x5a\x84\x2e\x30\xd5\x83\x56\x4f\x3f\x54\xdd\x80\x2c\xa4\x72\xd3\xfa\xf8\x94\x76\x4a\xbf\xfd\xcb\x05\x79\x5e\x48\x79\x7e\x37\xf7\x52\xae\x30\x53\x9e\xcf\x51\x53\xd4\xe1\xdd\x24\x2e\x47\x47\x36\xd4\x9d\x64\x9e\xb3\x09\xd9\x38\xff\x8f\x15\x3b\xa7\x55\x24\xbc\xa0\xd3\x96\xbc\x5e\x75\x17\x75\x7a\x9e\xd1\x27\x61\xfd\xa3\xab\x65\x2c\x07\xd7\xc6\x8b\xc3\xf9\xf7\xa8\xa7\xdf\xa1\x12\x84\xff\x97\x68\xcc\xe8\x4f\xc5\x63\x76\xe8\xd9\x11\x99\xab\xf7\xec\x98\xcc\x48\x4f\x45\xe5\x37\x9a\x7f\x48\xcf\xff\x06\x00\x00\xff\xff\xa0\xd1\x75\xba\x70\x17\x00\x00"),
		},
		"/tiller-ca-cert-configmap.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "tiller-ca-cert-configmap.yaml.tmpl",
			modTime:          time.Date(1970, 1, 1, 0, 0, 0, 0, time.UTC),
			uncompressedSize: 226,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\x0a\xc2\x30\x0c\x40\xef\xfd\x8a\xfc\x40\x07\x82\xa7\xde\xa4\x78\x53\x2f\x0e\xef\xb1\xcd\xb4\xd8\x66\xa3\x8b\x22\xd4\xfe\xbb\x6c\x4c\xd1\x63\x78\x2f\x2f\x29\x05\x42\x07\xcd\x96\xf1\x1c\xa9\x0d\x31\x52\x6e\x77\x47\xa8\x55\x6b\xad\x70\x08\x27\xca\x63\xe8\xd9\xc0\x63\xa5\x6e\x81\xbd\x01\xdb\x73\x17\x2e\x7b\x1c\x54\x22\x41\x8f\x82\x46\x01\x30\x26\x32\xd0\xc5\xfb\x53\x5f\x29\x26\x2d\x71\xd4\x0e\xb5\x9b\xe5\xe5\xc8\x01\x13\x8d\x03\x3a\x82\x5a\x97\x95\x79\x34\x50\xca\x3f\x2d\x05\x88\xfd\xa4\x7d\xfa\x0e\x1b\x97\xc5\xc0\x4b\x4d\x31\xf6\xc4\x02\x6b\x68\xbe\x1f\xdb\x8d\xa5\x2c\xb6\x67\x99\xc8\x6f\xe1\x1d\x00\x00\xff\xff\x60\xd7\x1c\xac\xe2\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-helm-operator-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-helm-release-crd.yaml.tmpl"].(os.FileInfo),
		fs["/helm-operator-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/tiller-ca-cert-configmap.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
