// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 8, 14, 10, 38, 8, 982093303, time.UTC),
		},
		"/flux-helm-operator-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-helm-operator-account.yaml.tmpl",
			modTime:          time.Date(2019, 8, 13, 9, 34, 10, 300868076, time.UTC),
			uncompressedSize: 948,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x39\x6f\xdc\x30\x10\x85\x7b\xfe\x8a\x01\x5c\x38\x09\x2c\x05\xee\x02\x75\xb6\x8b\x14\x09\x52\x28\x47\x13\xa4\x18\x92\x4f\x59\xc6\x5c\x8e\x30\x24\x37\x87\xb0\xff\x3d\x90\xb4\x06\xbc\x8e\xed\x34\xdb\x8d\xe6\xd2\x9b\xc7\xaf\x69\x1a\x73\x46\x9f\x36\xa0\x0c\xdd\x05\x07\x62\xe7\xa4\xa6\x72\x41\x2e\xd6\x5c\xa0\xa4\x12\x91\x2f\x88\x93\x3f\x4a\x91\x0d\xc9\x87\xf4\x9d\x58\x61\xce\x48\x52\xfc\x4d\x09\xf0\xf0\x34\x88\xd2\xbb\x6a\xa1\x09\x05\x99\x7e\x86\xb2\x59\x46\x1a\xcb\x19\x7e\xfe\x03\x72\x26\x27\xa9\xa8\x44\x7a\xd1\x5f\x5f\xdd\xbc\x6c\x0d\x8f\xe1\x0b\x34\x07\x49\x1d\xed\x2e\xcd\x6d\x48\xbe\xa3\x8f\xab\xaa\xab\x55\x94\xd9\xa2\xb0\xe7\xc2\x9d\x21\x8a\x6c\x11\xf3\x1c\x11\x25\xde\xa2\xa3\x21\xd6\x5f\xcd\x06\x71\xdb\xc8\x08\xe5\x22\x6a\x9e\x2e\x4d\x13\x85\x81\xda\x0f\xbc\x45\x1e\xd9\x81\xf6\xfb\x43\xf7\xf2\xd9\xd1\x34\x1d\x57\xa7\x89\x90\xfc\x7e\x6f\x66\xcf\xee\x8b\x55\xcb\xae\xe5\x5a\x36\xa2\xe1\x0f\x97\x20\xa9\xbd\x7d\x93\xdb\x20\xaf\x77\x97\x16\x85\xef\x6e\xb9\x59\xdd\xeb\x25\xe2\x94\x87\x18\xad\x11\xcb\x78\x43\x3c\x86\xb7\x2a\x75\xcc\x1d\x7d\x3d\x7f\x75\xfe\x6d\xd9\xa9\xc8\x52\xd5\xe1\x28\xb9\x83\xda\x7b\x89\x86\x92\xa4\xfe\xd0\xf8\xb9\x7f\xff\x74\xef\x09\xae\xbf\x5e\xc9\x39\xad\x09\x12\xd1\x63\x98\x17\xdc\x99\xf0\x8c\x36\x43\xf4\xef\x9b\x3c\xb3\x3d\x57\xfb\x03\xae\x1c\x5c\x7e\x14\xcd\xff\x08\x7f\x88\xd6\x43\xf6\x1e\xa3\x2d\xe6\x39\xf2\x18\xb8\xc6\xb2\xe2\x37\x53\xfa\x37\x00\x00\xff\xff\xad\xec\xff\x2b\xb4\x03\x00\x00"),
		},
		"/flux-helm-release-crd.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-helm-release-crd.yaml.tmpl",
			modTime:          time.Date(2019, 8, 13, 14, 28, 47, 862973466, time.UTC),
			uncompressedSize: 4467,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x5f\x6f\xdb\x36\x10\x7f\xd7\xa7\x20\xb2\x01\x69\x87\x5a\x5b\xb0\x61\xd8\x04\x14\x5d\xd0\xa2\xe8\xd6\xb5\x09\xe2\x35\x2f\x41\x06\x9c\xa5\xb3\xcc\x99\x22\xb9\xe3\xc9\xab\x37\xec\xbb\x0f\xa4\x24\xc7\x52\xf5\xc7\x8d\xd3\xed\x65\x7c\x32\x79\xbc\xdf\xdd\xfd\xee\x8e\x3e\xcd\x66\xb3\x08\xac\xbc\x46\x72\xd2\xe8\x44\x80\x95\xf8\x9e\x51\xfb\x9d\x8b\xd7\xdf\xb9\x58\x9a\x2f\x37\x67\x0b\x64\x38\x8b\xd6\x52\x67\x89\x78\x5e\x3a\x36\xc5\x15\x3a\x53\x52\x8a\x2f\x70\x29\xb5\x64\x69\x74\x54\x20\x43\x06\x0c\x49\x24\x84\x86\x02\x13\xb1\x42\x55\x10\x2a\x04\x87\x2e\xf6\x9b\x78\xa9\xca\xf7\x69\x16\x4b\x13\x39\x8b\xa9\xbf\x99\x93\x29\x6d\x75\x75\x4f\x5a\x21\x38\x7f\x41\x88\xca\xee\x2b\x54\xc5\x55\x05\x16\x4e\x95\x74\xfc\xba\x2b\xf9\x59\x3a\x0e\x52\xab\x4a\x02\xd5\x76\x21\x08\xdc\xca\x10\xbf\xbd\x03\x9f\x89\x15\x45\x42\xb8\xd4\x58\x4c\x44\x10\x58\x48\x31\x8b\x84\x80\x2c\x0b\x91\x81\xba\x24\xa9\x19\xe9\xb9\x51\x65\xa1\x77\x8a\x3f\xcd\x2f\xde\x5e\x02\xaf\x12\x11\x3b\x06\x2e\x5d\x5c\x5b\xf2\x28\xe1\x4e\x43\xc4\xbe\xdf\x42\xf0\xd6\x9b\x72\x4c\x52\xe7\x53\x50\xf3\xb0\x6b\x81\xb5\x8e\x0e\xc2\x4a\x8d\xae\x22\x71\x37\xcf\x1e\xfd\x10\x7b\x9d\xa7\x4f\x4f\x6a\xa7\xb2\x93\xc7\xb7\x71\x81\xce\x41\xde\x76\xfa\x4d\xeb\x6c\xdc\x50\x93\xfb\x38\x25\x04\x6f\xe9\x17\x59\xa0\x63\x28\x6c\x0b\xf2\xbc\x03\x97\x01\xfb\x03\x57\x2e\xa8\xae\xa7\x9a\xdc\xca\xf1\x44\xfc\xf5\x77\x24\xc4\xa6\xa9\xce\xcd\xd9\xdd\x6e\x97\x85\x0a\x39\x88\x82\x26\xd2\x06\xb3\x44\x30\x95\x8d\x2d\xc7\x86\x20\xc7\xdd\xd9\x06\x94\xcc\x82\x97\x15\x86\xb1\xa8\xcf\x2f\x7f\xbc\xfe\x7a\x9e\xae\xb0\x80\xa4\x56\xb3\x64\x2c\x12\xcb\xc6\xa7\x00\x55\x57\x6d\xb3\x08\x7f\x2f\x25\x79\x7b\x37\xa7\xe9\x0a\x88\x4f\x6f\xf7\xa4\x7d\x08\x95\xd6\xae\x4c\xda\x82\x1e\x9a\xf7\xd0\x80\x19\x49\x27\xe2\xe4\xd7\x1b\x98\xfd\xf9\xd5\xec\xfb\xdb\x47\x37\xb3\xfa\xd7\x17\xcd\xd1\xe3\x67\x9f\x9f\xb4\x14\x19\x28\x47\xde\x15\xf6\xbf\x60\x50\x16\x68\x4a\xee\x37\xe4\xfb\x28\x47\xea\xc8\x96\x86\x0a\xe0\x20\xfd\xf6\x9b\x0e\x55\x0e\xf9\x1a\x54\xd9\xe5\xb0\x01\x5c\x18\xa3\x10\x74\xd4\x81\x4b\xf1\x9d\xcd\x09\xb2\x81\x78\xfb\xb4\xc8\x28\xb5\x80\x74\xdd\xaf\x61\x16\xbf\x61\xca\x5d\x86\x06\x12\xec\x17\x6a\x58\xa8\x0f\xcc\x8f\xbb\xb0\x73\xfe\xe3\xd5\x08\x43\xeb\xdd\x43\x33\x93\xce\x7b\xfa\xca\x98\x75\x4f\x18\x53\xda\x03\xd9\x16\x13\x19\x17\xa3\x59\xf7\xeb\x0f\x90\x23\xa8\x7d\xee\x6c\x7c\x99\xbc\x94\x0a\xe7\x9e\x0b\x1e\x28\x18\x20\x82\x6d\x47\x22\x19\x8b\x9e\xd8\x47\x32\xdf\x6e\x7d\xff\x06\xb5\x3a\xbf\x5a\x63\xe5\x51\x3f\x89\x3d\xe7\x23\x3d\x19\x22\x74\x2f\xc9\x14\x9f\x36\xb6\x71\xc7\x53\xa3\x97\x32\x7f\x03\xf6\x35\x6e\xaf\x70\x39\x16\xc3\x00\xbe\x38\x8c\xbf\x69\x57\xc4\x28\x8f\x62\xfc\x7d\x6b\xd6\x1a\xb7\x47\xe9\x1b\x5b\x4d\x09\x53\x20\x43\x2d\xe4\xff\xb4\x7c\xc1\xfe\x4f\x67\x58\xc7\xd3\xe9\x47\x58\xd2\xa0\xe6\x61\xa4\x78\x18\x4e\x4b\x52\xf7\xa6\xb4\xa4\xc9\x60\x3e\x31\x23\x61\x36\xf1\x4f\xe3\xc3\x90\x61\x81\x57\xf7\x66\xc3\x2b\xff\xa7\x74\x18\x8d\x17\x3d\x2c\xcc\xda\xd3\x5c\xfb\x91\xeb\x89\xb6\x7d\x7f\xbf\x85\x27\x2f\x7f\x50\xa0\x93\x1a\xfb\x09\xec\x5c\xde\x8c\x4c\x47\x3d\xf9\x0c\x48\xdd\xdb\xbd\x94\xb4\x3d\xc8\x25\x9f\x3e\x11\x43\xa9\x1f\x4f\x7b\xde\xff\x57\x7e\x40\xb6\x9b\x19\x21\x97\x2c\x3e\x13\xda\xb0\xc8\xfc\x17\x27\x66\x62\xb1\x15\x17\xe7\xf3\x1e\xa5\xe1\xfa\x9a\xb0\x46\xe3\xbd\x31\xa8\xe7\xd6\xd2\xbe\x40\xfb\xce\x66\x03\xf3\xd7\x78\x41\xb6\x69\x26\xb4\xc6\x49\x36\xb4\xf5\x6c\x87\x97\xfc\x89\x38\xad\x3f\x7a\x3e\x9a\xf8\x3b\xb4\x23\xf9\x2f\x49\x1d\xca\xff\x3d\xe6\x9a\x6a\x35\xdf\x79\xc7\x79\xea\xb0\xd8\x20\x1d\xea\x6c\xe8\x86\xcb\x52\xa9\x6a\x66\xec\xb7\xfd\xa0\x7f\x9a\xff\x04\x00\x00\xff\xff\x1b\x84\x12\x67\x73\x11\x00\x00"),
		},
		"/helm-operator-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "helm-operator-deployment.yaml.tmpl",
			modTime:          time.Date(2019, 8, 14, 10, 38, 8, 978759939, time.UTC),
			uncompressedSize: 5693,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x4b\x8f\xdb\xc8\x11\xbe\xcf\xaf\x28\xcc\x1c\x7c\x19\x92\x32\xd6\xd9\x03\x0d\x1f\x92\xdd\xec\xda\x80\xed\x0c\x32\x46\x80\x9c\x76\x5b\xcd\x92\xd8\x51\xb3\x9b\xe9\x2e\x4a\x21\x84\xcd\x6f\x0f\xaa\x9b\xe2\x43\x14\x35\x9a\xcd\x61\xe7\x62\x99\xac\x77\x7d\xf5\x62\x92\x24\x77\xa2\x56\xff\x40\xe7\x95\x35\x39\x88\xba\xf6\xd9\xfe\xed\xdd\x4e\x99\x22\x87\x1f\xb1\xd6\xb6\xad\xd0\xd0\x5d\x85\x24\x0a\x41\x22\xbf\x03\x30\xa2\xc2\x1c\x36\xba\xf9\x4f\x52\xa2\xae\x12\x5b\xa3\x13\x64\xdd\xf1\x08\x6a\x03\xe9\x57\x51\xa1\xaf\x85\x44\xf8\xed\xb7\x8e\x3a\xfc\x37\x87\xe3\x71\xfa\xf6\x78\x04\x34\x05\x93\xf9\x1a\x25\x8b\x76\x58\x6b\x25\x85\xcf\xe1\xed\x1d\x80\x47\x8d\x92\xac\xe3\x37\x00\x95\x20\x59\x7e\x16\x6b\xd4\x3e\x3e\x58\xb6\x84\x79\xc9\x09\xc2\x6d\x1b\x49\xa9\xad\x31\x87\xbf\xa3\x74\x28\x08\xef\x00\x08\xab\x5a\x0b\xc2\x4e\xf4\xc8\x3b\xfe\xd3\x13\x2d\x57\xf5\xf0\x9f\x30\xc6\x92\x20\x65\xcd\x88\xa7\x76\xb6\x42\x2a\xb1\xf1\xa9\xb2\x99\x97\x4e\xb0\x09\xf7\xe4\x1a\xbc\x0f\x44\x27\x9f\xc3\x6f\x74\x7b\x25\xf1\xcf\x52\xda\xc6\xd0\xd7\xeb\xea\xf6\x56\x37\x15\xfa\xbc\x8b\xf7\x5f\x8d\x58\x6b\xfc\xa6\xb4\x46\xf7\xed\xf3\x73\x8c\x7a\xfc\x4b\x3a\xcb\x83\x14\xd2\x3e\x91\xa2\x7f\x07\x20\xad\xd9\xa8\xed\x17\x51\xe7\xa3\x87\x73\x67\x23\x5f\x12\xa9\x27\x94\x05\x6e\x44\xa3\xe9\x8b\x2d\x30\x87\xd5\xf7\xab\xd5\x15\xc5\xe8\xc8\x8f\x98\x3d\xa7\x82\xa6\x8a\xe3\xb3\xe8\x7c\xe7\x5b\xef\xd5\x0f\xe8\xe8\xb9\x7f\x1f\xb1\x73\xfd\x2d\x6a\xcf\xbf\xce\xfc\x40\x47\x03\xea\x96\x7d\x79\xb7\x5a\x0d\x22\x3a\xba\x87\xd3\xbf\xf0\x4f\xdb\xc0\x41\x69\x0d\x06\xb1\x00\x2a\xd1\x23\xd0\xc1\x9e\x12\xc3\x96\xb7\x4c\x22\x0c\x01\x59\x40\x4f\x62\xad\x95\x2f\x61\x2f\xb4\x2a\x04\x61\x01\xdf\x3e\x3f\xf7\xe2\xa4\x35\x06\x65\x80\x0f\x88\xad\x50\xc6\x13\x44\xd7\x66\x9a\x97\x13\xfa\x70\x29\xa1\x0f\x37\x27\xf4\xe1\x6a\x42\x1f\x20\x46\x37\xd4\x11\xec\x9a\x35\x3a\x83\x84\x01\xd9\xa4\xfd\xcc\xbc\x79\xd0\x47\x6a\xa6\xa9\x7f\xf8\x23\x53\x7f\xc9\xeb\x77\x83\xd7\xc7\x23\x9a\x62\x44\xfc\xad\x44\xd8\x58\xad\xed\x41\x99\x6d\x97\x6d\x50\x1e\x36\xd6\x41\xe3\xf9\x99\x00\xd9\x78\xb2\x95\xf2\x58\xc0\xce\xd8\x83\xf9\xa5\xb4\x9e\x3c\x6c\x94\xc6\xc7\x5e\xd0\xa1\x54\xb2\x8c\x18\x19\x60\x64\xa1\xb0\x27\xe8\x30\x13\xff\x70\x60\x0f\x06\xb6\x8a\xb8\x33\x5a\x70\x82\xca\x01\x15\x40\xa5\x30\x9d\xe2\xad\xa2\xb2\x59\x83\x75\x0c\x47\xd0\x6a\x87\x29\xc3\xf4\x8d\xd6\x20\xb4\xb7\xbd\x8a\x8a\xfb\x0b\xa8\x21\x1f\xca\x90\x0d\x3c\xd2\x1a\x12\xca\xa0\x7b\x84\x35\x6a\x7b\x48\x2f\xc2\xbe\x12\x6d\x14\x78\x60\x3c\x93\xe5\x36\xb7\x57\x05\x82\x30\xe0\x7d\xf9\x4b\x04\xd5\x99\xbb\x3c\x41\x94\x35\x6c\x67\x65\x1d\x46\xbb\xad\x41\xf8\xf5\x53\xc1\xaf\xa8\xfd\x49\x69\xfc\xf5\x7d\x08\x24\xc3\x5f\x18\x89\x8f\x5d\x2c\xde\x38\xec\x05\x45\x5f\xa7\x32\x7e\x56\xf4\xb1\x59\x87\xf8\xa4\xf0\xf5\x2f\xc1\x17\x34\xe4\x5a\xd8\x61\x0b\xbe\xb4\x8d\x2e\x60\x3d\xc8\xb8\x8f\x26\xde\x77\xc1\x8c\x82\xee\x07\xdb\xef\x59\x6f\x08\x13\x16\xa0\x0c\xfc\x37\x4b\xbd\x2f\xb3\x79\x38\x4e\x60\xf7\xbe\x2c\x94\x7b\x55\x19\x7a\x5f\xbe\x5c\x7e\xb1\x07\x71\x29\x3c\x3f\x7f\x9c\x40\xfc\x6e\x28\xcb\xe7\x8f\xc1\x4d\xb2\x20\xa4\x44\xef\x83\xfb\x3f\x77\x78\xf1\x8a\xac\x6b\x67\x4d\x79\xab\x28\xd9\x61\xfb\xba\x6e\x3c\x37\x62\x4c\x3c\xb3\x3c\x80\x1c\x4d\x1f\x48\x87\xa2\x48\xac\xd1\xed\x23\x1c\x10\x0e\xd6\xbc\x21\x58\x23\xf0\xe4\x62\xe3\x65\x59\xd9\xe2\xee\x15\x2d\x57\xf9\xbe\xfe\x4e\x28\xe9\x4b\xb0\x2f\x17\x2a\xc5\x00\x74\x66\xf4\x0c\xd3\x53\xcc\x18\x6c\x31\x68\xef\x01\xd3\x6d\xfa\x08\xe2\x04\xa6\x22\x2c\x3e\x4c\x95\xc2\xa7\x4d\x2f\x62\xa2\xe7\x5f\x8d\xa7\x00\x40\xdf\xc8\x32\xe8\x7b\x0c\xc1\xef\x42\x31\xaa\x86\x9e\x5f\x68\x0e\x43\x0b\xb5\x55\x86\x3c\x08\x82\x0c\x49\x66\x0c\x89\x22\x63\x90\xa9\xae\x1c\x40\x78\x10\x27\xf5\xac\x76\xe8\x1c\xdd\x4c\x69\x3c\x9e\xd5\xc1\x0e\xdb\xc7\x60\xe1\xa8\xa1\x9c\x8a\xf3\xd4\x49\x7a\x31\xa3\x52\x15\x6b\xbb\xc7\x47\x38\x28\x2a\x39\x3a\xd3\x92\xec\x2a\x29\xac\x5e\xec\x34\x0a\x59\xf6\x42\x38\x88\xca\x04\xa7\x23\x58\x4e\x85\x8e\x05\x94\xe8\x70\xb9\x64\xa6\x08\xbc\x65\x28\x84\xb2\x61\xb6\x98\x9a\xeb\x65\xf3\xbb\xc0\xb7\xdc\xf3\xcf\xa6\xbb\x70\x18\xb0\x13\xa4\x47\xc4\xf5\xc5\xa6\xd0\xa7\xad\xa8\xf4\x59\x03\x14\xa6\xe8\x72\xd1\x0d\x09\x21\x19\x29\xca\x85\xf5\xb6\x4d\xc3\x64\xd1\x82\x08\x1d\xcf\x13\x4e\x1f\x72\xd3\x92\xa2\xf1\x43\xe7\xea\x15\x52\x98\x43\xae\x42\x17\x6b\xa2\x12\x3b\x8c\x3d\x9c\xe5\x66\x83\xe0\xc1\xf3\xe5\x5c\x8c\x6d\x4f\xd8\xf6\xd7\x66\x25\x4c\xd8\xb1\x94\xeb\x2a\x82\x8d\x23\x89\x58\xd5\xd4\xfe\xa8\x5c\x0e\xc7\xbe\xb1\xf5\xb3\xa8\xdf\xa7\xe7\x9b\xc5\xd9\x52\xdc\xe5\xca\x61\xc8\x8f\xb1\x70\x9f\xf3\x7e\xef\xe9\x1e\x54\x25\xb6\x18\xa7\xf4\x84\x33\x85\x9f\x94\x09\xfb\x1b\x54\x3c\x6f\x1d\x4a\x3e\x75\x06\x79\x0e\x35\x0a\x8f\x3c\x55\x83\x0c\xd8\xc7\x3b\x89\x2b\xb7\x24\xaa\x7d\x9e\x65\x65\xb3\x4e\x0b\x2b\x77\xe8\x52\x69\xab\xcc\x65\x07\x14\x7b\x3c\x58\xb7\xf3\xd9\x44\x5b\x46\x62\xeb\x47\xc2\x19\x13\x7c\xee\xf0\x29\xc4\x26\x90\xd8\x4e\xaa\x06\xa2\xce\x1c\x3a\xe9\xca\x86\x46\x21\x8b\xa9\xd8\xfc\x6d\xba\x4a\x57\x89\x93\x6f\xa7\x7c\x4f\x8d\xd6\x4f\x56\x2b\xd9\xe6\xf0\x69\xf3\xd5\xd2\x93\x43\x3f\x76\xaf\xb6\x8e\x46\xe7\x4a\xbf\x59\x12\xd5\xd3\x1b\x21\x66\xe2\xc9\x3a\xca\xe1\xbb\xd5\x77\xc3\x92\xef\xd0\xdb\xc6\x49\xf4\xe3\xc1\xe1\xf0\xdf\x0d\x7a\xf2\xd3\x61\x22\xeb\x26\x87\x3f\xad\xaa\xc9\xc3\x0a\x2b\xeb\xda\x1c\xbe\x7f\xf7\x45\xf5\x2f\x62\x95\x7d\x61\xa8\x8f\x64\x3c\xc0\x27\x23\x75\x53\x60\x6c\xfd\xdd\x96\x34\x5d\x6a\x16\x77\x2f\xeb\xe6\xcd\x98\x45\x72\x8d\xbe\x3f\xb5\xcc\xd1\x96\x54\xe2\x69\xb6\x14\x28\xb5\x70\x58\xc4\x26\x99\x8e\x78\x2f\x0e\xff\x08\xe8\x60\xcd\x93\xa0\x32\x87\xcc\x59\x4b\x61\x7f\x98\x50\x70\x55\xfe\xcd\xe8\x36\x07\xbe\x06\x5f\x18\xf2\x70\x75\x72\x4f\xd5\x4d\xa6\xc9\x7c\x9c\x2e\xb7\xe0\xb9\xe5\x13\x51\xf3\x93\xe9\xe5\xfe\x31\x17\xb9\x17\xae\x13\xc9\x08\xce\x2e\x6c\x28\x37\xb4\x8c\x57\x88\xcd\x02\xdf\xf2\x95\x7c\x21\xc0\x8b\xf7\xea\x52\x70\x98\x61\x42\x36\xcd\xed\x55\x15\xe2\x46\xf9\xe7\x94\x67\x2a\xae\xa6\x79\xc1\xa1\xe5\x6c\x4f\x1c\x9a\x83\xf5\xaa\x0a\x71\xa3\xfc\x73\xca\x59\x3d\x9c\x81\x4d\xb8\xed\xa4\x17\x7c\xb4\x07\x2e\xfb\x0d\x77\xef\xc9\xa1\xcc\x51\x4e\x12\x0a\x8f\x92\xfe\xc3\xd3\x87\xc9\x45\x79\xf6\x01\xea\xf2\xd3\x2e\xa0\x7c\xe9\x26\xbe\xf5\x84\x55\x6f\xd5\xcb\x5f\x5d\x1e\xf8\xba\xef\xae\x80\xc6\x85\xef\x42\x97\xec\x3b\x9d\xe1\xe8\x28\xa9\x05\x95\x1f\xe6\x51\xca\xa4\x48\xa5\xa3\x25\x6e\x0c\x36\x7c\x98\xe4\xe5\x8c\x64\x87\xed\x45\xe1\x7c\xb6\xa7\xe3\xfa\x3f\x37\x6c\xc9\xaa\xc0\x78\xc5\xa6\x3d\x3a\xb5\x69\xaf\xda\x74\x9b\xd3\x17\x61\xfd\x83\xad\x78\xc7\x04\xdb\x84\x2d\x78\xf9\xe3\xca\xcb\x1f\x55\x22\x84\xff\x9f\x6c\xcc\xf8\x2f\xe5\x63\x46\x74\x73\x46\xe6\xe6\xdd\x9c\x93\x19\xeb\xa5\xac\xfc\x4e\xf7\x87\xf2\xfc\x5f\x00\x00\x00\xff\xff\x18\xe5\xe4\x23\x3d\x16\x00\x00"),
		},
		"/tiller-ca-cert-configmap.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "tiller-ca-cert-configmap.yaml.tmpl",
			modTime:          time.Date(2019, 8, 13, 13, 2, 50, 842813325, time.UTC),
			uncompressedSize: 226,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\x0a\xc2\x30\x0c\x40\xef\xfd\x8a\xfc\x40\x07\x82\xa7\xde\xa4\x78\x53\x2f\x0e\xef\xb1\xcd\xb4\xd8\x66\xa3\x8b\x22\xd4\xfe\xbb\x6c\x4c\xd1\x63\x78\x2f\x2f\x29\x05\x42\x07\xcd\x96\xf1\x1c\xa9\x0d\x31\x52\x6e\x77\x47\xa8\x55\x6b\xad\x70\x08\x27\xca\x63\xe8\xd9\xc0\x63\xa5\x6e\x81\xbd\x01\xdb\x73\x17\x2e\x7b\x1c\x54\x22\x41\x8f\x82\x46\x01\x30\x26\x32\xd0\xc5\xfb\x53\x5f\x29\x26\x2d\x71\xd4\x0e\xb5\x9b\xe5\xe5\xc8\x01\x13\x8d\x03\x3a\x82\x5a\x97\x95\x79\x34\x50\xca\x3f\x2d\x05\x88\xfd\xa4\x7d\xfa\x0e\x1b\x97\xc5\xc0\x4b\x4d\x31\xf6\xc4\x02\x6b\x68\xbe\x1f\xdb\x8d\xa5\x2c\xb6\x67\x99\xc8\x6f\xe1\x1d\x00\x00\xff\xff\x60\xd7\x1c\xac\xe2\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-helm-operator-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-helm-release-crd.yaml.tmpl"].(os.FileInfo),
		fs["/helm-operator-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/tiller-ca-cert-configmap.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
