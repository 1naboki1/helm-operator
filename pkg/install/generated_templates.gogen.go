// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 8, 13, 7, 52, 51, 373791057, time.UTC),
		},
		"/flux-helm-operator-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-helm-operator-account.yaml.tmpl",
			modTime:          time.Date(2019, 8, 13, 7, 52, 26, 296527299, time.UTC),
			uncompressedSize: 948,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x39\x6f\xdc\x30\x10\x85\x7b\xfe\x8a\x01\x5c\x38\x09\x2c\x05\xee\x02\x75\xb6\x8b\x14\x09\x52\x28\x47\x13\xa4\x18\x92\x4f\x59\xc6\x5c\x8e\x30\x24\x37\x87\xb0\xff\x3d\x90\xb4\x06\xbc\x8e\xed\x34\xdb\x8d\xe6\xd2\x9b\xc7\xaf\x69\x1a\x73\x46\x9f\x36\xa0\x0c\xdd\x05\x07\x62\xe7\xa4\xa6\x72\x41\x2e\xd6\x5c\xa0\xa4\x12\x91\x2f\x88\x93\x3f\x4a\x91\x0d\xc9\x87\xf4\x9d\x58\x61\xce\x48\x52\xfc\x4d\x09\xf0\xf0\x34\x88\xd2\xbb\x6a\xa1\x09\x05\x99\x7e\x86\xb2\x59\x46\x1a\xcb\x19\x7e\xfe\x03\x72\x26\x27\xa9\xa8\x44\x7a\xd1\x5f\x5f\xdd\xbc\x6c\x0d\x8f\xe1\x0b\x34\x07\x49\x1d\xed\x2e\xcd\x6d\x48\xbe\xa3\x8f\xab\xaa\xab\x55\x94\xd9\xa2\xb0\xe7\xc2\x9d\x21\x8a\x6c\x11\xf3\x1c\x11\x25\xde\xa2\xa3\x21\xd6\x5f\xcd\x06\x71\xdb\xc8\x08\xe5\x22\x6a\x9e\x2e\x4d\x13\x85\x81\xda\x0f\xbc\x45\x1e\xd9\x81\xf6\xfb\x43\xf7\xf2\xd9\xd1\x34\x1d\x57\xa7\x89\x90\xfc\x7e\x6f\x66\xcf\xee\x8b\x55\xcb\xae\xe5\x5a\x36\xa2\xe1\x0f\x97\x20\xa9\xbd\x7d\x93\xdb\x20\xaf\x77\x97\x16\x85\xef\x6e\xb9\x59\xdd\xeb\x25\xe2\x94\x87\x18\xad\x11\xcb\x78\x43\x3c\x86\xb7\x2a\x75\xcc\x1d\x7d\x3d\x7f\x75\xfe\x6d\xd9\xa9\xc8\x52\xd5\xe1\x28\xb9\x83\xda\x7b\x89\x86\x92\xa4\xfe\xd0\xf8\xb9\x7f\xff\x74\xef\x09\xae\xbf\x5e\xc9\x39\xad\x09\x12\xd1\x63\x98\x17\xdc\x99\xf0\x8c\x36\x43\xf4\xef\x9b\x3c\xb3\x3d\x57\xfb\x03\xae\x1c\x5c\x7e\x14\xcd\xff\x08\x7f\x88\xd6\x43\xf6\x1e\xa3\x2d\xe6\x39\xf2\x18\xb8\xc6\xb2\xe2\x37\x53\xfa\x37\x00\x00\xff\xff\xad\xec\xff\x2b\xb4\x03\x00\x00"),
		},
		"/flux-helm-release-crd.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-helm-release-crd.yaml.tmpl",
			modTime:          time.Date(2019, 8, 13, 7, 52, 26, 296695822, time.UTC),
			uncompressedSize: 4007,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xdf\x6f\xfb\x34\x10\x7f\xcf\x5f\x61\x0d\xa4\x02\x5a\x0a\x13\x08\x41\x5e\xd0\xc4\x34\x0d\x0d\xd8\xb4\x6a\x7b\x99\x86\x74\x4d\xae\xa9\xa9\x63\x9b\xf3\x25\x5b\x41\xfc\xef\xc8\x49\xd3\x2d\x59\x7e\x74\xed\x26\x5e\xbe\x7e\x6a\x7d\xbe\x8f\xef\x3e\xf7\xc3\x97\x30\x0c\x03\xb0\xf2\x0e\xc9\x49\xa3\x23\x01\x56\xe2\x13\xa3\xf6\xff\xdc\x74\xf5\x83\x9b\x4a\xf3\x75\x71\x32\x47\x86\x93\x60\x25\x75\x12\x89\x9f\x73\xc7\x26\xbb\x41\x67\x72\x8a\xf1\x0c\x17\x52\x4b\x96\x46\x07\x19\x32\x24\xc0\x10\x05\x42\x68\xc8\x30\x12\x4b\x54\x19\xa1\x42\x70\xe8\xa6\x0b\x95\x3f\x4d\x1f\x11\x0a\x9c\x3e\x1a\x5a\xb9\xc0\x59\x8c\xfd\xd9\x94\x4c\x6e\x23\xf1\x4a\x5e\xa1\x38\x7f\x44\x88\xea\xee\x0b\x54\xd9\x4d\x05\x58\xee\x2a\xe9\xf8\xb2\x2d\xf9\x55\x3a\x2e\xa5\x56\xe5\x04\xaa\x69\x46\x29\x70\x4b\x43\xfc\xfb\x33\x78\x28\x96\x14\x08\xe1\x62\x63\x31\x12\xa5\xc0\x42\x8c\x89\xdf\xcb\xe7\xb4\x71\x75\x73\xd8\x31\x70\xee\x22\xf1\xcf\xbf\x81\x10\x45\x4d\x5c\xcd\xd1\x76\x6b\x0b\x5d\x51\xf1\x2c\x2f\x31\x90\x0a\x4c\x22\xc1\x94\x63\xbd\xc5\x86\x20\xc5\xed\x5e\x01\x4a\x26\xe0\x89\xad\x80\x8c\x45\x7d\x7a\xfd\xcb\xdd\xb7\xb3\x78\x89\x19\x44\x1b\x35\x4b\xc6\x22\xb1\xac\xad\x2b\xa1\x36\xc4\xd6\x8b\xf0\xaf\x5c\x92\xbf\xef\x7e\x12\x2f\x81\x78\xf2\xf0\x42\xda\x85\x50\x69\x95\x8c\x79\x36\x9a\x02\x21\x78\xed\x79\x72\x4c\x52\xa7\x2d\x91\x05\x66\x24\x1d\x89\xa3\x3f\xee\x21\xfc\xfb\x9b\xf0\xc7\x87\x2f\xee\xc3\xcd\xaf\xaf\xea\xad\x2f\x7f\xfa\xfc\xa8\xa1\xc8\x32\x43\x93\x73\xf7\x45\x52\x33\xa6\x48\x2d\xd9\xc2\x50\x06\x5c\x4a\xbf\xff\xae\x65\xb9\x43\xbe\x03\x95\xb7\x5d\xaa\x01\xe7\xc6\x28\x04\x1d\xb4\xe0\x62\xbc\xb5\x29\x41\xd2\xe3\x6f\x97\x16\x19\xa5\xe6\x10\xaf\xba\x35\xcc\xfc\x4f\x8c\xb9\xcd\x50\x0f\xdf\x7e\xa1\x86\xb9\x7a\x75\xfd\xb0\x09\x5b\xe3\xdf\xae\x46\x18\x13\x02\xef\xa1\x99\x48\xe7\x2d\xbd\x30\x66\xd5\xe1\xc6\x98\x76\x4f\xb4\xc5\x48\xc4\xc5\x60\xd4\xfd\x7a\x04\x39\x80\xda\x65\x4e\xe1\xd3\xe4\x5c\x2a\x9c\x79\x2e\xb8\x27\x61\x80\x08\xd6\x2d\x89\x64\xcc\x3a\x7c\x1f\x88\x7c\xb3\x12\x7d\x5f\x68\x14\x62\xb5\x86\xd2\x63\xd3\x57\x3b\xf6\x07\x6a\xb2\xf4\xd0\x9d\x93\xc9\x3e\xd6\xb7\x61\xc3\x63\xa3\x17\x32\xfd\x0d\xec\x25\xae\x6f\x70\x31\xe4\x43\x0f\xbe\xd8\x8d\xbf\x71\x53\xc4\x20\x8f\x62\xb8\xbf\xd5\x6b\x85\xeb\x83\xf4\x8d\xf5\xad\x1d\xd4\x18\x48\x5f\x09\xf9\x37\xc4\x27\xec\x27\x3a\xcb\x75\x38\x9d\x7e\xec\x21\x0d\x6a\x56\xbe\xf5\xef\xc3\x69\x4e\x6a\x6f\x4a\x73\x1a\x75\xe6\x83\x19\x29\x47\x05\xdf\x1a\xdf\x87\x0c\x0b\xbc\xdc\x9b\x0d\xaf\xfc\xbf\xd2\x61\x34\x5e\x75\xb0\x10\x36\x87\xab\x66\x93\xeb\xf0\xb6\x79\xfe\x65\x09\x8f\x1e\x7e\x95\xa0\xa3\x1a\x2f\x03\xd8\x3a\x5c\x0c\x4c\x47\x1d\xf1\x2c\x91\xda\xa7\x3b\x29\x69\x5a\x90\x4a\x9e\x1c\x8b\xbe\xd0\x0f\x87\x3d\xed\x7e\xca\x77\x88\x76\x3d\x23\xa4\x92\xc5\x67\x42\x1b\x16\x89\xff\x4a\xc1\x44\xcc\xd7\xe2\xea\x74\xd6\xa1\xd4\x9f\x5f\x23\xb7\xd1\x70\x6d\xf4\xea\xb9\x95\xb4\x67\x68\x6f\x6d\xd2\x33\x7f\x0d\x27\x64\x93\x66\x42\x6b\x9c\x64\x43\x6b\xcf\x76\xd9\xc9\x8f\xc5\x64\xf3\x21\xf2\x66\xe2\x9f\xd1\x0e\xe4\x3f\x27\xb5\x2b\xff\x7b\xcc\x35\xd5\xaa\x3f\xc0\x0e\xb3\xd4\x61\x56\x20\xed\x6a\x6c\x59\x0d\xd7\xb9\x52\xd5\xcc\xd8\x7d\xf7\xbb\x3e\x9a\xff\x05\x00\x00\xff\xff\x50\xad\xd4\x1b\xa7\x0f\x00\x00"),
		},
		"/helm-operator-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "helm-operator-deployment.yaml.tmpl",
			modTime:          time.Date(2019, 8, 13, 7, 52, 51, 374013448, time.UTC),
			uncompressedSize: 5672,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x58\x4b\x8f\xdb\xc8\x11\xbe\xcf\xaf\x28\xcc\x1c\x7c\x19\x91\x32\xd6\xd9\x03\x0d\x1f\x92\xdd\xec\xda\x80\xed\x0c\x32\x46\x80\x9c\x76\x4b\xcd\x92\xd8\x51\xb3\x9b\xe9\x2e\x4a\x21\x84\xc9\x6f\x0f\xaa\x49\xf1\x21\x4a\x9a\x19\xe7\xb0\xba\x78\x4c\xd6\xbb\xbe\x7a\x71\xb1\x58\xdc\x60\xa5\xff\x41\x3e\x68\x67\x33\xc0\xaa\x0a\xe9\xee\xed\xcd\x56\xdb\x3c\x83\x9f\xa9\x32\xae\x29\xc9\xf2\x4d\x49\x8c\x39\x32\x66\x37\x00\x16\x4b\xca\x60\x6d\xea\xff\x2c\x0a\x32\xe5\xc2\x55\xe4\x91\x9d\x3f\x1c\x40\xaf\x21\xf9\x8a\x25\x85\x0a\x15\xc1\xd3\x53\x47\x1d\xff\x9b\xc1\xe1\x30\x7d\x7b\x38\x00\xd9\x5c\xc8\x42\x45\x4a\x44\x7b\xaa\x8c\x56\x18\x32\x78\x7b\x03\x10\xc8\x90\x62\xe7\xe5\x0d\x40\x89\xac\x8a\xcf\xb8\x22\x13\xda\x07\x97\x2d\x11\x5e\xf6\xc8\xb4\x69\x5a\x52\x6e\x2a\xca\xe0\xef\xa4\x3c\x21\xd3\x0d\x00\x53\x59\x19\x64\xea\x44\x8f\xbc\x93\x9f\x99\x68\xb9\xaa\x47\x7e\x68\xad\x63\x64\xed\xec\x88\xa7\xf2\xae\x24\x2e\xa8\x0e\x89\x76\x69\x50\x1e\xc5\x84\x5b\xf6\x35\xdd\x46\xa2\xa3\xcf\xf1\x6f\xf2\x3b\xad\xe8\xcf\x4a\xb9\xda\xf2\xd7\xeb\xea\x76\xce\xd4\x25\x85\xac\x8b\xf7\x5f\x2d\xae\x0c\x7d\xd3\xc6\x90\xff\xf6\xf9\xb1\x8d\x7a\xfb\x5b\x74\x96\x47\x29\x6c\xc2\x42\x61\xff\x0e\x40\x39\xbb\xd6\x9b\x2f\x58\x65\xa3\x87\x73\x67\x5b\xbe\x45\x4b\x3d\xa1\xcc\x69\x8d\xb5\xe1\x2f\x2e\xa7\x0c\x96\x3f\x2e\x97\x57\x14\x93\xe7\x30\x62\x0e\x92\x0a\x9e\x2a\x6e\x9f\xb5\xce\x77\xbe\xf5\x5e\xfd\x44\x9e\x1f\xfb\xf7\xf0\xf4\x74\xe9\x95\x60\xca\x04\xa1\x38\xf1\x80\x3c\x0f\x78\xbb\xec\xc5\xbb\xe5\x72\x10\xd1\xd1\xdd\x1d\xff\x85\x7f\xba\x1a\xf6\xda\x18\xb0\x44\x39\x70\x41\x81\x80\xf7\xee\x98\x12\xb1\xb9\x11\x12\xb4\x0c\xec\x80\x02\xe3\xca\xe8\x50\xc0\x0e\x8d\xce\x91\x29\x87\x6f\x9f\x1f\x7b\x71\xca\x59\x4b\x2a\x02\x07\x70\x83\xda\x06\x86\xd6\xaf\x99\xe6\xcb\xa9\xbc\x3b\x97\xca\xbb\x17\xa7\xf2\xee\x6a\x2a\xef\xa0\x0d\x6d\xac\x20\xd8\xd6\x2b\xf2\x96\x98\x22\xa6\xd9\x84\x99\x79\xf3\xa0\x8f\xd4\x4c\x93\x7e\xf7\xc7\x24\xfd\x9c\xbf\xef\x06\x7f\x0f\x07\xb2\xf9\x88\xf8\x5b\x41\xb0\x76\xc6\xb8\xbd\xb6\x9b\x2e\xcf\xa0\x03\xac\x9d\x87\x3a\xc8\x33\x04\x55\x07\x76\xa5\x0e\x94\xc3\xd6\xba\xbd\xfd\xad\x70\x81\x03\xac\xb5\xa1\xfb\x5e\xd0\xbe\xd0\xaa\x68\xd1\x31\x00\xc8\x41\xee\x8e\xa0\x11\x26\xf9\xc3\x83\xdb\x5b\xd8\x68\x96\x6e\xe8\xc0\x23\x17\x03\x1e\x80\x0b\xb4\x9d\xe2\x8d\xe6\xa2\x5e\x81\xf3\x02\x44\x30\x7a\x4b\x89\x00\xf4\x8d\x31\x80\x26\xb8\x5e\x45\x29\x3d\x05\xf4\x90\x09\x6d\xd9\x45\x1e\xe5\x2c\xa3\xb6\xe4\xef\x61\x45\xc6\xed\x93\xb3\x80\x2f\xb1\x69\x05\xee\x05\xc9\xec\xa4\xb5\xed\x74\x4e\x80\x16\x42\x28\x7e\x6b\xe1\x74\xe2\xae\x4c\x0d\xed\xac\xd8\x59\x3a\x4f\xad\xdd\xce\x12\xfc\xfe\x29\x97\x57\xdc\xfc\xa2\x0d\xfd\xfe\x3e\x06\x52\x80\x8f\x56\xd1\x7d\x17\x8b\x37\x9e\x7a\x41\xad\xaf\x53\x19\xbf\x6a\xfe\x58\xaf\x62\x7c\x12\xf8\xfa\x97\xe8\x0b\x59\xf6\x0d\x6c\xa9\x81\x50\xb8\xda\xe4\xb0\x1a\x64\xdc\xb6\x26\xde\x76\xc1\x6c\x05\xdd\x0e\xb6\xdf\x8a\xde\x18\x26\xca\x41\x5b\xf8\x6f\x9a\x84\x50\xa4\xf3\x70\x1c\x61\x1e\x42\x91\x6b\xff\xaa\x02\x0c\xa1\x78\xbe\xf0\xda\xee\x23\x45\xf0\xf8\xf8\x71\x02\xfd\x9b\xa1\x20\x1f\x3f\x46\x37\xd9\x01\x2a\x45\x21\x44\xf7\x7f\xed\xf0\x12\x34\x3b\xdf\xcc\x1a\xf1\x46\xf3\x62\x4b\xcd\xeb\x3a\xf0\xdc\x88\x31\xf1\xcc\xf2\x08\x72\xb2\x7d\x20\x3d\x61\xbe\x70\xd6\x34\xf7\xb0\x27\xd8\x3b\xfb\x86\x61\x45\x20\xd3\x4a\x8c\x57\x45\xe9\xf2\x9b\x57\x34\x5b\x1d\xfa\xfa\x3b\xa2\xa4\x2f\xc1\xbe\x5c\xb8\xc0\x01\xe8\xc2\x18\x04\xa6\xc7\x98\x09\xd8\xda\xa0\xbd\x07\x4a\x36\xc9\x3d\xe0\x11\x4c\x79\x5c\x76\x84\x2a\x81\x4f\xeb\x5e\xc4\x44\xcf\xbf\xea\xc0\x11\x80\xa1\x56\x45\xd4\x77\x1f\x83\xdf\x85\x62\x54\x0d\x3d\x3f\x1a\x09\x43\x03\x95\xd3\x96\x03\x20\x43\x4a\xac\x52\x81\x44\x9e\x0a\xc8\x74\x57\x0e\x80\x01\xf0\xa8\x5e\xd4\x0e\x9d\xa3\x9b\x26\x75\xa0\x93\x3a\xd8\x52\x73\x1f\x2d\x1c\x35\x94\x63\x71\x1e\x3b\x49\x2f\x66\x54\xaa\xb8\x72\x3b\xba\x87\xbd\xe6\x42\xa2\x33\x2d\xc9\xae\x92\xe2\xba\x25\x4e\x13\xaa\xa2\x17\x22\x41\xd4\x36\x3a\xdd\x82\xe5\x58\xe8\x94\x43\x41\x9e\x2e\x97\xcc\x14\x81\x2f\x19\x07\xb1\x6c\x84\xad\x4d\xcd\xf5\xb2\xf9\x2e\xf0\x5d\xee\xf9\x27\x73\x1d\x3d\x45\xec\x44\xe9\x2d\xe2\xfa\x62\xd3\x14\x92\x06\x4b\x73\xd2\x00\xd1\xe6\x5d\x2e\xba\x21\x81\x4a\x90\xa2\x7d\x5c\x69\x9b\x24\x4e\x16\x83\xcc\xe4\x65\x9e\x48\xfa\x48\x9a\x96\xc2\x3a\x0c\x9d\xab\x57\xc8\x71\x0e\xf9\x92\x7c\x5b\x13\x25\x6e\xa9\xed\xe1\x22\x37\x1d\x04\x0f\x9e\x5f\xce\xc5\xd8\xf6\x85\xd8\xfe\xda\xac\xc4\x09\x3b\x96\x72\x5d\x45\xb4\x71\x24\x91\xca\x8a\x9b\x9f\xb5\xcf\xe0\xd0\x37\xb6\x7e\x16\xf5\x3b\xf4\x7c\xa7\x38\x59\x84\xbb\x5c\x79\x8a\xf9\xb1\x0e\x6e\x33\xd9\xe9\x03\xdf\x82\x2e\x71\x43\xed\x94\x9e\x70\x26\xf0\x8b\xb6\x71\x73\x83\x52\xe6\xad\x27\x25\xe7\xcd\x20\xcf\x93\x21\x0c\x24\x53\x35\xca\x80\x5d\x7b\x1b\x49\xe5\x16\xcc\x55\xc8\xd2\xb4\xa8\x57\x49\xee\xd4\x96\x7c\xa2\x5c\x99\xfa\x74\x4f\xb8\xa3\xbd\xf3\xdb\x90\x4e\xb4\xa5\x8c\x9b\x30\x12\x2e\x98\x90\x13\x47\xce\x1f\x31\x81\x71\x33\xa9\x1a\x68\x75\x66\xd0\x49\xd7\x2e\x36\x0a\x95\x4f\xc5\x66\xcb\xe4\xed\x32\x79\x3b\x65\x7a\xa8\x8d\x79\x70\x46\xab\x26\x83\x4f\xeb\xaf\x8e\x1f\x3c\x85\xb1\x6f\x95\xf3\x3c\xba\x4f\xfa\x85\x92\xb9\x9a\x1e\x05\x6d\x1a\x1e\x9c\xe7\x0c\x7e\x58\xfe\x30\x6c\xf5\x9e\x82\xab\xbd\xa2\x30\x9e\x1a\x9e\xfe\x5d\x53\xe0\x30\x9d\x24\xaa\xaa\x33\xf8\xd3\xb2\x9c\x3c\x2c\xa9\x74\xbe\xc9\xe0\xc7\x77\x5f\x74\xff\xa2\x2d\xb1\x2f\x82\xf3\x91\x8c\x3b\xf8\x64\x95\xa9\x73\x6a\xfb\x7e\xb7\x22\x4d\x37\x9a\x8b\x8b\x97\xf3\xf3\x4e\x2c\x22\xa5\x40\xdf\x1f\xfb\xe5\x68\x45\x2a\xe8\x38\x58\x72\x52\x06\x3d\xe5\x6d\x87\x4c\x46\xbc\x67\x27\x7f\x8b\xe6\x68\xcd\x03\x72\x91\x41\xea\x9d\xe3\xb8\x3c\x4c\x28\xa4\x24\xff\x66\x4d\x93\x81\x9c\x7f\xcf\x4c\x78\xb8\x3a\xb6\xa7\xea\x26\xa3\x64\x3e\x4b\x2f\xf7\xdf\xb9\xe5\x13\x51\xf3\x4b\xe9\xf9\xe6\x31\x17\xb9\x43\xdf\x89\x14\xf8\xa6\x67\xd6\x93\x17\xf4\x8b\x57\x88\x4d\x23\xdf\xe5\xb3\xf8\x4c\x80\x2f\x1e\xa8\x97\x82\x23\x0c\x13\xb2\x69\x6e\xaf\xaa\xc0\x17\xca\x3f\xa5\x3c\x51\x71\x35\xcd\x17\x1c\xba\x9c\xed\x89\x43\x73\xb0\x5e\x55\x81\x2f\x94\x7f\x4a\x39\xab\x87\x13\xb0\xa1\xdf\x4c\x7a\xc1\x47\xb7\x97\xb2\x5f\x4b\xeb\x9e\xdc\xc7\x12\xe5\xc5\x82\xe3\xa3\x45\xff\xa5\xe9\xc3\xe4\x90\x1c\x7f\x71\x3a\x7d\x34\x84\x52\x4e\xdb\x45\x68\x02\x53\xd9\xdb\xf3\xfc\x07\x96\x3b\x39\xe7\xbb\xe5\xbf\xf6\xf1\x13\xd0\x39\xcb\x8e\x77\x37\x79\x5e\x54\xc8\xc5\x87\x79\x7c\x52\x85\x89\xf2\x7c\x89\x9b\xa2\x0d\x1f\x26\x19\x39\x21\xd9\x52\x73\x56\xb8\xdc\xe9\xc9\xb8\xf2\x4f\x0d\xbb\x64\x55\x64\xbc\x62\xd3\x8e\xbc\x5e\x37\x57\x6d\x7a\x99\xd3\x67\x01\xfd\x93\x2b\x65\xb5\x04\x57\xc7\xe5\xf7\xf2\xd7\x94\xe7\xbf\xa2\xb4\xe0\xfd\x7f\xb2\x31\xe3\x3f\x97\x8f\x19\xd1\x8b\x33\x32\x37\xef\xc5\x39\x99\xb1\x9e\xcb\xca\x77\xba\x3f\x14\xe6\xff\x02\x00\x00\xff\xff\x7b\x79\xf1\x05\x28\x16\x00\x00"),
		},
		"/tiller-ca-cert-configmap.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "tiller-ca-cert-configmap.yaml.tmpl",
			modTime:          time.Date(2019, 8, 13, 7, 52, 46, 233158271, time.UTC),
			uncompressedSize: 240,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\x4a\x05\x31\x0c\x45\xf7\xfd\x8a\xfb\x03\x19\x10\xc4\x45\x77\x3a\xbc\x9d\xba\xf1\xe1\x3e\xb6\x19\x2d\xb6\xe9\xd0\x56\x11\x6a\xff\x5d\xa6\x3c\x05\x97\x21\x27\xe7\xa4\x77\x84\x0d\xcb\x49\xf9\x25\xca\x39\xc4\x28\xe5\x7c\xff\x84\x31\x88\xc8\xf0\x1e\x9e\xa5\xd4\x90\xd5\xe2\xf3\xca\xbc\x07\xf5\x16\x6b\xd6\x2d\xbc\x3e\xf0\x6e\x92\x34\xf6\xdc\xd8\x1a\x40\x39\x89\xc5\x16\x3f\xbe\xe8\x4d\x62\xa2\x16\x2b\x39\x26\x37\x61\x03\x5c\x3a\x8f\x9c\xa4\xee\xec\x04\x63\x5c\xae\xe6\x68\x0f\xe0\xdf\xb6\x77\x88\xfa\x03\xfb\x4d\x38\x5e\x5c\x69\x16\xdf\x06\x98\xc2\x3b\xae\x72\x73\x7d\x52\x97\xbd\x60\xf9\x7b\x7e\xbd\x5d\xa5\xb4\x35\x6b\x13\x6d\x87\xa0\x77\x9a\x2e\x1a\xc3\xfc\x04\x00\x00\xff\xff\x07\x07\x0b\xfa\xf0\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-helm-operator-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-helm-release-crd.yaml.tmpl"].(os.FileInfo),
		fs["/helm-operator-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/tiller-ca-cert-configmap.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
